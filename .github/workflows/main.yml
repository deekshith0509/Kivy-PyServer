name: Build and Upload APK

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Python 3.11
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Step 3: Set up JDK
      - name: Set up JDK
        id: setup-jdk
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      # Step 4: Install system dependencies
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip build-essential \
              autoconf automake libtool zlib1g-dev libncurses5-dev \
              libgdbm-dev libnss3-dev libssl-dev libreadline-dev \
              libffi-dev libsqlite3-dev libbz2-dev python3-pip \
              python3-setuptools python3-wheel

      # Step 5: Setup Android SDK
      - name: Setup Android SDK
        run: |
          mkdir -p $HOME/Android/cmdline-tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip
          unzip commandlinetools-linux-8512546_latest.zip -d $HOME/Android/cmdline-tools/
          if [ -d "$HOME/Android/cmdline-tools/cmdline-tools" ]; then
              mv $HOME/Android/cmdline-tools/cmdline-tools $HOME/Android/cmdline-tools/latest
          elif [ -d "$HOME/Android/cmdline-tools/tools" ]; then
              mv $HOME/Android/cmdline-tools/tools $HOME/Android/cmdline-tools/latest
          else
              echo "No cmdline-tools directory found. Check the extraction output."
              exit 1
          fi

      # Step 6: Accept Android SDK Licenses
      - name: Accept Android SDK Licenses
        run: |
          yes | $HOME/Android/cmdline-tools/latest/bin/sdkmanager --licenses

      # Step 7: Install specific Android SDK components
      - name: Install specific Android SDK components
        run: |
          $HOME/Android/cmdline-tools/latest/bin/sdkmanager "platforms;android-30" "build-tools;30.0.3" "ndk;21.4.7075529" "platform-tools"
          echo "Installed SDK components:"
          $HOME/Android/cmdline-tools/latest/bin/sdkmanager --list

      # Step 8: Cache Python dependencies and Buildozer
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/buildozer
            ~/.buildozer
            ~/.local
          key: ${{ runner.os }}-buildozer-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-buildozer-

      # Step 9: Install Python dependencies
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install cython buildozer python-for-android

      # Step 10: Set up environment variables
      - name: Set up environment variables
        run: |
          echo "JAVA_HOME=${{ steps.setup-jdk.outputs.java-home }}" >> $GITHUB_ENV
          echo "ANDROID_HOME=$HOME/Android" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=$HOME/Android/ndk/21.4.7075529" >> $GITHUB_ENV
          echo "PATH=$HOME/Android/cmdline-tools/latest/bin:$HOME/Android/platform-tools:$HOME/Android/build-tools/30.0.3:$HOME/Android/ndk/21.4.7075529:$PATH" >> $GITHUB_ENV

      # Step 11: Build the APK using Buildozer
      - name: Build APK
        run: |
          echo "Building APK..."
          for i in {1..3}; do
              echo y | buildozer -v android debug --debug && break || sleep 10
          done

      # Step 12: Upload APK artifacts
      - name: Upload APK
        uses: actions/upload-artifact@v3
        with:
          name: APK
          path: bin/*.apk
          if-no-files-found: warn
